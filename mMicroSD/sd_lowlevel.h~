#ifndef SD_LOWLEVEL_H
#define SD_LOWLEVEL_H

#include "m_general.h"
#include "crc.h"

// the ONLY block length for SDHC and SDXC cards is 512 bytes
#define MAX_BLOCK_LENGTH  512ul

#define RESET_TRIES_BEFORE_ERROR 10
#define INIT_TRIES_BEFORE_ERROR  10000ul
#define READ_BLOCK_TIMEOUT_BYTES 65534ul


// sd_lowlevel assumes an 8MHz chip clock

#ifdef DEBUG
extern uint32_t total_block_accesses;
#endif

#ifdef FREE_RAM
void free_ram (void);
#endif

enum spi_speed
{
    SPI_INIT_SPEED,
    SPI_MIN_SPEED,
    SPI_LOW_SPEED,
    SPI_MED_SPEED,
    SPI_HIGH_SPEED
};

typedef enum ret_val
{
    OK,
    BAD_CRC,
    TIMEOUT,
    ERROR
} ret;

// sets up the output pins and registers
// can be called multiple times (eg, low speed at first, then high speed after initialization)
void start_spi (enum spi_speed speed);

void attempt_resync (void);

ret reset_card (void);  // the first thing that needs to be called after start_spi
ret initialize_card (void);

// enabling CRC must be done between reset_card and initialize_card
// CRC is disabled by default
ret enable_crc (void);

extern uint16_t last_crc;  // the most recently received CRC value from the card
// (needed because the card could be returning all 0xFFFFs instead of actual CRCs)

extern volatile uint8_t block[MAX_BLOCK_LENGTH];  // the data buffer used when reading/writing
extern uint16_t block_length;  // max of MAX_BLOCK_LENGTH, initialized to 0
ret set_block_length (const uint16_t block_length);
ret read_block (const uint32_t block_number);
ret read_block_crc_only (const uint32_t block_number, uint16_t *crc);
ret write_block (const uint32_t block_number);

#endif

